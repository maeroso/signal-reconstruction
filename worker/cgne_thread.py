import sys
from threading import Thread

import cv2
import numpy
from PIL import Image

from global_data import GlobalData
from resource_lock import resource_lock


class CgneThread(Thread):

    def __init__(self, identification, global_data: GlobalData, g: numpy.ndarray):
        super().__init__()
        self.id = identification
        self.global_data = global_data
        self.signal = g

        resource_lock(minimum_free_memory=-1,
                      cpu_lock_warning_message="Unable to launch the thread, CPU load greater than 90%",
                      maximum_cpu_load=90)

        self.start()
        sys.stdout.write(" [*] CGNE thread was initiate. Id: " + str(self.id) + "\n")

    def run(self):

        loop_maximum = 150

        loop_counter = 0

        f_next = 0

        error = 0

        best_try_error = 10

        f_old = numpy.zeros_like(numpy.matmul(self.global_data.get_transpose_h(), self.signal))

        best_try = numpy.zeros_like(f_old)

        r_old = numpy.subtract(self.signal, numpy.matmul(self.global_data.H, f_old))

        p_old = numpy.matmul(self.global_data.get_transpose_h(), r_old)

        for counter in range(loop_maximum):

            loop_counter = counter

            a_i = numpy.divide(numpy.matmul(r_old.transpose(), r_old, dtype=float),
                               numpy.matmul(p_old.transpose(), p_old))

            f_next = numpy.add(f_old, numpy.multiply(p_old, a_i))

            r_next = numpy.subtract(r_old, numpy.multiply(numpy.matmul(self.global_data.H, p_old), a_i))

            beta = numpy.divide(numpy.matmul(r_next.transpose(), r_next), numpy.matmul(r_old.transpose(), r_old))

            p_next = numpy.matmul(self.global_data.get_transpose_h(), r_next) + numpy.multiply(p_old, beta)

            error = numpy.absolute(numpy.subtract(numpy.linalg.norm(r_next, ord=2), numpy.linalg.norm(r_old, ord=2)))

            if error < best_try_error:
                best_try = f_next
                best_try_error = error

            p_old = p_next

            f_old = f_next

            r_old = r_next

            if error < self.global_data.minimal_error:
                break

        if loop_counter == loop_maximum - 1:
            f_next = best_try
            error = best_try_error

        sys.stdout.write(
            " [X] Data about image generated by cgne thread id " + str(self.id) + " -> actual error: " +
            str(error) + "  expected error: <" + str(self.global_data.minimal_error) + "  loop counter: " +
            str(loop_counter) + "\n")

        f_reshaped = f_next.reshape(60, 60)

        normalized = cv2.normalize(src=f_reshaped, alpha=0, beta=255, dst=numpy.zeros_like(f_reshaped),
                                   norm_type=cv2.NORM_MINMAX)

        first_image = Image.fromarray(numpy.uint8(normalized.transpose()), mode='L')

        first_image.save('./images/CGNE - ' + str(self.id) + '.bmp')

        del self
